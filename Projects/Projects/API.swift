//  This file was automatically generated and should not be edited.

import Apollo

/// Autogenerated input type of CreateProject
public struct CreateProjectInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  public init(ownerId: GraphQLID, name: String) {
    graphQLMap = ["ownerId": ownerId, "name": name]
  }

  public init(ownerId: GraphQLID, name: String, body: String?) {
    graphQLMap = ["ownerId": ownerId, "name": name, "body": body]
  }

  public init(clientMutationId: String?, ownerId: GraphQLID, name: String) {
    graphQLMap = ["clientMutationId": clientMutationId, "ownerId": ownerId, "name": name]
  }

  public init(clientMutationId: String?, ownerId: GraphQLID, name: String, body: String?) {
    graphQLMap = ["clientMutationId": clientMutationId, "ownerId": ownerId, "name": name, "body": body]
  }
}

public final class CreateNewProjectMutation: GraphQLMutation {
  public static let operationDefinition =
    "mutation CreateNewProject($input: CreateProjectInput!) {" +
    "  createProject(input: $input) {" +
    "    clientMutationId" +
    "    project {" +
    "      id" +
    "      name" +
    "    }" +
    "  }" +
    "}"

  public let input: CreateProjectInput

  public init(input: CreateProjectInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLMappable {
    public let createProject: CreateProject?

    public init(reader: GraphQLResultReader) throws {
      createProject = try reader.optionalValue(for: Field(responseName: "createProject", arguments: ["input": reader.variables["input"]]))
    }

    public struct CreateProject: GraphQLMappable {
      public let __typename = "CreateProjectPayload"
      public let clientMutationId: String?
      public let project: Project

      public init(reader: GraphQLResultReader) throws {
        clientMutationId = try reader.optionalValue(for: Field(responseName: "clientMutationId"))
        project = try reader.value(for: Field(responseName: "project"))
      }

      public struct Project: GraphQLMappable {
        public let __typename = "Project"
        public let id: GraphQLID
        public let name: String

        public init(reader: GraphQLResultReader) throws {
          id = try reader.value(for: Field(responseName: "id"))
          name = try reader.value(for: Field(responseName: "name"))
        }
      }
    }
  }
}

public final class ReposProjectsQuery: GraphQLQuery {
  public static let operationDefinition =
    "query ReposProjects($repo: String!) {" +
    "  viewer {" +
    "    repository(name: $repo) {" +
    "      id" +
    "      projects(first: 10) {" +
    "        edges {" +
    "          node {" +
    "            id" +
    "            name" +
    "          }" +
    "        }" +
    "      }" +
    "    }" +
    "  }" +
    "}"

  public let repo: String

  public init(repo: String) {
    self.repo = repo
  }

  public var variables: GraphQLMap? {
    return ["repo": repo]
  }

  public struct Data: GraphQLMappable {
    public let viewer: Viewer

    public init(reader: GraphQLResultReader) throws {
      viewer = try reader.value(for: Field(responseName: "viewer"))
    }

    public struct Viewer: GraphQLMappable {
      public let __typename = "User"
      public let repository: Repository?

      public init(reader: GraphQLResultReader) throws {
        repository = try reader.optionalValue(for: Field(responseName: "repository", arguments: ["name": reader.variables["repo"]]))
      }

      public struct Repository: GraphQLMappable {
        public let __typename = "Repository"
        public let id: GraphQLID
        public let projects: Project

        public init(reader: GraphQLResultReader) throws {
          id = try reader.value(for: Field(responseName: "id"))
          projects = try reader.value(for: Field(responseName: "projects", arguments: ["first": 10]))
        }

        public struct Project: GraphQLMappable {
          public let __typename = "ProjectConnection"
          public let edges: [Edge?]?

          public init(reader: GraphQLResultReader) throws {
            edges = try reader.optionalList(for: Field(responseName: "edges"))
          }

          public struct Edge: GraphQLMappable {
            public let __typename = "ProjectEdge"
            public let node: Node?

            public init(reader: GraphQLResultReader) throws {
              node = try reader.optionalValue(for: Field(responseName: "node"))
            }

            public struct Node: GraphQLMappable {
              public let __typename = "Project"
              public let id: GraphQLID
              public let name: String

              public init(reader: GraphQLResultReader) throws {
                id = try reader.value(for: Field(responseName: "id"))
                name = try reader.value(for: Field(responseName: "name"))
              }
            }
          }
        }
      }
    }
  }
}

public final class PublicReposQuery: GraphQLQuery {
  public static let operationDefinition =
    "query PublicRepos {" +
    "  viewer {" +
    "    login" +
    "    repositories(first: 20, privacy: PUBLIC) {" +
    "      edges {" +
    "        node {" +
    "          name" +
    "          id" +
    "          projects(first: 100) {" +
    "            edges {" +
    "              node {" +
    "                name" +
    "              }" +
    "            }" +
    "          }" +
    "        }" +
    "      }" +
    "    }" +
    "  }" +
    "}"
  public init() {
  }

  public struct Data: GraphQLMappable {
    public let viewer: Viewer

    public init(reader: GraphQLResultReader) throws {
      viewer = try reader.value(for: Field(responseName: "viewer"))
    }

    public struct Viewer: GraphQLMappable {
      public let __typename = "User"
      public let login: String
      public let repositories: Repository

      public init(reader: GraphQLResultReader) throws {
        login = try reader.value(for: Field(responseName: "login"))
        repositories = try reader.value(for: Field(responseName: "repositories", arguments: ["first": 20, "privacy": "PUBLIC"]))
      }

      public struct Repository: GraphQLMappable {
        public let __typename = "RepositoryConnection"
        public let edges: [Edge?]?

        public init(reader: GraphQLResultReader) throws {
          edges = try reader.optionalList(for: Field(responseName: "edges"))
        }

        public struct Edge: GraphQLMappable {
          public let __typename = "RepositoryEdge"
          public let node: Node?

          public init(reader: GraphQLResultReader) throws {
            node = try reader.optionalValue(for: Field(responseName: "node"))
          }

          public struct Node: GraphQLMappable {
            public let __typename = "Repository"
            public let name: String
            public let id: GraphQLID
            public let projects: Project

            public init(reader: GraphQLResultReader) throws {
              name = try reader.value(for: Field(responseName: "name"))
              id = try reader.value(for: Field(responseName: "id"))
              projects = try reader.value(for: Field(responseName: "projects", arguments: ["first": 100]))
            }

            public struct Project: GraphQLMappable {
              public let __typename = "ProjectConnection"
              public let edges: [Edge?]?

              public init(reader: GraphQLResultReader) throws {
                edges = try reader.optionalList(for: Field(responseName: "edges"))
              }

              public struct Edge: GraphQLMappable {
                public let __typename = "ProjectEdge"
                public let node: Node?

                public init(reader: GraphQLResultReader) throws {
                  node = try reader.optionalValue(for: Field(responseName: "node"))
                }

                public struct Node: GraphQLMappable {
                  public let __typename = "Project"
                  public let name: String

                  public init(reader: GraphQLResultReader) throws {
                    name = try reader.value(for: Field(responseName: "name"))
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}